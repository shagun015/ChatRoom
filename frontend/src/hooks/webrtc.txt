 // useEffect(() => {
    //     clientsRef.current = clients;
    // }, [clients]);


    // useEffect(() => {

    //     const initChat = async ()=>{
    //         socket.current = socketInit();
    //         await captureMedia();

    //         addNewClient({ ...user, muted: true }, () => {
    //             const localElement = audioElements.current[user.id];
    //             if (localElement) {
    //                 localElement.volume = 0;
    //                 localElement.srcObject = localMediaStream.current;
    //             }
    //         });
    //         socket.current.on(ACTIONS.MUTE_INFO, ({ userId, isMute }) => {
    //             setMute(isMute, userId);
    //         });

    //         socket.current.on(ACTIONS.ADD_PEER, handleNewPeer);
    //         socket.current.on(ACTIONS.REMOVE_PEER, handleRemovePeer);
    //         socket.current.on(ACTIONS.ICE_CANDIDATE, handleIceCandidate);
    //         socket.current.on(ACTIONS.SESSION_DESCRIPTION, handleRemoteSdp);
    //         socket.current.on(ACTIONS.MUTE,({peerId,userId})=>{
    //             setMute(true,userId)
    //         });
    //         socket.current.on(ACTIONS.UN_MUTE,({peerId,userId})=>{
    //             setMute(false,userId)
    //         });
    //         socket.current.emit(ACTIONS.JOIN, { 
    //             roomId, 
    //             user 
    //         });


    //         //
    //         async function captureMedia(){
    //             //start capture local audio stream
    //             localMediaStream.current =
    //                 await navigator.mediaDevices.getUserMedia({
    //                     audio: true,
    //                 });
    //         }

    //         async function handleNewPeer ({
    //             peerId,
    //             createOffer,
    //             user: remoteUser,
    //         }) {
    //             // if already connected then give warning
    //             if (peerId in connections.current) {
    //                 return console.warn(
    //                     `You are already connected with ${peerId} (${user.name})`
    //                 );
    //             }
    
    //             connections.current[peerId] = new RTCPeerConnection({
    //                 iceServers: freeice(),
    //             });
    
    //             // Handle new ice candidate
    //             connections.current[peerId].onicecandidate = (event) => {
    //                 socket.current.emit(ACTIONS.RELAY_ICE, {
    //                     peerId,
    //                     icecandidate: event.candidate,
    //                 });
    //             };
    
    //             // Handle on track on this connection
    
    //             connections.current[peerId].ontrack = ({
    //                 streams: [remoteStream],
    //             }) => {
    //                 addNewClient({...remoteUser,muted:true}, () => {

    //                     const currentUser = clientsRef.current.find(
    //                         (client) => client.id === user.id
    //                     );

    //                     if (currentUser) {
    //                         socket.current.emit(ACTIONS.MUTE_INFO, {
    //                             userId: user.id,
    //                             roomId,
    //                             isMute: currentUser.muted,
    //                         });
    //                     }

    //                     if (audioElements.current[remoteUser.id]) {
    //                         audioElements.current[remoteUser.id].srcObject =
    //                             remoteStream;
    //                     } else {
    //                         let settled = false;
    //                         const interval = setInterval(() => {
    //                             if (audioElements.current[remoteUser.id]) {
    //                                 audioElements.current[remoteUser.id].srcObject =
    //                                     remoteStream;
    //                                 settled = true;
    //                             }
    //                             if (settled) {
    //                                 clearInterval(interval);
    //                             }
    //                         }, 1000);
    //                     }
    //                 });
    //             };
    
    //             // Add local track to remote connections
    //             localMediaStream.current.getTracks().forEach((track) => {
    //                 connections.current[peerId].addTrack(
    //                     track,
    //                     localMediaStream.current
    //                 );
    //             });
    
    //             // Create offer
    //             if (createOffer) {
    //                 const offer = await connections.current[peerId].createOffer();
    
    //                 await connections.current[peerId].setLocalDescription(offer);
    
    //                 // send offer to another client
    //                 socket.current.emit(ACTIONS.RELAY_SDP, {
    //                     peerId,
    //                     sessionDescription: offer,
    //                 });
    //             }
    //         }

    //         async function handleRemovePeer({ peerId, userId }){
    //             if (connections.current[peerId]) {
    //                 connections.current[peerId].close();
    //             }
    
    //             delete connections.current[peerId];
    //             delete audioElements.current[peerId];
    //             setClients((list) => list.filter((client) => client.id !== userId));
    //         }

    //         async function handleIceCandidate({ peerId, icecandidate }){
    //             if (icecandidate) {
    //                 connections.current[peerId].addIceCandidate(icecandidate);
    //             }
    //         }

    //         async function handleRemoteSdp ({
    //             peerId,
    //             sessionDescription: remoteSessionDescription,
    //         }){
    //             connections.current[peerId].setRemoteDescription(
    //                 new RTCSessionDescription(remoteSessionDescription)
    //             );
    
    //             // if session description is type of offer then create an answer
    
    //             if (remoteSessionDescription.type === 'offer') {
    //                 const connection = connections.current[peerId];
    //                 const answer = await connection.createAnswer();
    
    //                 connection.setLocalDescription(answer);
    
    //                 socket.current.emit(ACTIONS.RELAY_SDP, {
    //                     peerId,
    //                     sessionDescription: answer,
    //                 });
    //             }
    //         }

    //         async function setMute(mute, userId){
    //             // Ensure connectedClients is initialized as an array
    //             const connectedClients = JSON.parse(JSON.stringify(clientsRef.current));  
            
    //             // Find the client index by userId
    //             const clientIdx = connectedClients.findIndex((client) => client.id === userId);
            
    //             if (clientIdx > -1) {
    //                 // Update the muted property of the specific client
    //                 connectedClients[clientIdx].muted = mute;
            
    //                 // Update the state with the modified array
    //                 setClients([...connectedClients]);
    //             }
    //         }
    //     };
    //     initChat();

    //     return ()=>{
    //         if (localMediaStream.current && localMediaStream.current.getTracks) {

    //             localMediaStream.current
    //             .getTracks()
    //             .forEach((track) => {track.stop()});

    //           }
  
    //         socket.current.emit(ACTIONS.LEAVE, { roomId });

    //         // for (let peerId in connections.current) {
    //         //     connections.current[peerId].close();
    //         //     delete connections.current[peerId];
    //         //     delete audioElements.current[peerId];
    //         // }

    //         socket.current.off(ACTIONS.ADD_PEER);
    //         socket.current.off(ACTIONS.REMOVE_PEER);
    //         socket.current.off(ACTIONS.ICE_CANDIDATE);
    //         socket.current.off(ACTIONS.SESSION_DESCRIPTION);
    //         socket.current.off(ACTIONS.MUTE);
    //         socket.current.off(ACTIONS.UN_MUTE);
    //     }
        
    // }, []);